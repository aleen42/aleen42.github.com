// Generated by CoffeeScript 1.10.0
(function() {
  var AVBuffer, EventEmitter, FileSource, fs,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('../../core/events');

  AVBuffer = require('../../core/buffer');

  fs = require('fs');

  FileSource = (function(superClass) {
    extend(FileSource, superClass);

    function FileSource(filename) {
      this.filename = filename;
      this.stream = null;
      this.loaded = 0;
      this.size = null;
    }

    FileSource.prototype.getSize = function() {
      return fs.stat(this.filename, (function(_this) {
        return function(err, stat) {
          if (err) {
            return _this.emit('error', err);
          }
          _this.size = stat.size;
          return _this.start();
        };
      })(this));
    };

    FileSource.prototype.start = function() {
      var b, blen;
      if (this.size == null) {
        return this.getSize();
      }
      if (this.stream) {
        return this.stream.resume();
      }
      this.stream = fs.createReadStream(this.filename);
      b = new Buffer(1 << 20);
      blen = 0;
      this.stream.on('data', (function(_this) {
        return function(buf) {
          _this.loaded += buf.length;
          buf.copy(b, blen);
          blen = blen + buf.length;
          _this.emit('progress', _this.loaded / _this.size * 100);
          if (blen >= b.length || _this.loaded >= _this.size) {
            if (blen < b.length) {
              b = b.slice(0, blen);
            }
            _this.emit('data', new AVBuffer(new Uint8Array(b)));
            blen -= b.length;
            return buf.copy(b, 0, blen);
          }
        };
      })(this));
      this.stream.on('end', (function(_this) {
        return function() {
          return _this.emit('end');
        };
      })(this));
      return this.stream.on('error', (function(_this) {
        return function(err) {
          _this.pause();
          return _this.emit('error', err);
        };
      })(this));
    };

    FileSource.prototype.pause = function() {
      return this.stream.pause();
    };

    return FileSource;

  })(EventEmitter);

  module.exports = FileSource;

}).call(this);
